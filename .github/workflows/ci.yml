name: Modulus CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install pytest pytest-cov numpy

    - name: Run unit tests
      run: |
        cd /Users/jackal-kahwati/Resonant\ Exoplanet/resonant-worlds-explorer
        pytest tests/ -v --cov=modulus_core --cov-report=xml

    - name: Run kernel tests
      run: |
        pytest tests/test_memory_scheduler.py tests/test_profiler.py tests/test_realtime.py -v

    - name: Run example: PDE stencil
      run: |
        cd examples/pde_stencil
        python heat_equation_2d.py --nx 32 --ny 32 --nt 10 --seed 42

    - name: Run example: Perception stack
      run: |
        cd examples/perception_stack
        python perception_demo.py --height 32 --width 32 --seed 42

    - name: Verify determinism
      run: |
        cd examples/pde_stencil
        python heat_equation_2d.py --nx 32 --ny 32 --nt 10 --seed 42 --output run1.npy
        python heat_equation_2d.py --nx 32 --ny 32 --nt 10 --seed 42 --output run2.npy
        python -c "import numpy as np; assert np.allclose(np.load('run1.npy'), np.load('run2.npy')), 'Outputs are not identical!'"

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"

    - name: Install linting tools
      run: |
        pip install flake8 black mypy

    - name: Run flake8
      run: |
        flake8 modulus_core/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 modulus_core/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Check formatting with black
      run: |
        black --check modulus_core/ tests/ examples/

    - name: Type check with mypy
      run: |
        mypy modulus_core/ --ignore-missing-imports


